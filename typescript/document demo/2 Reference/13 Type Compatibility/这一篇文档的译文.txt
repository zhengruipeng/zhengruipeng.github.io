
好的，我会尽力帮你翻译这个网页中的A Note on Soundness一章和他前面的内容。请注意，这是一个机器翻译，可能不是完全准确或流畅的。如果你想要一个更高质量的翻译，你可能需要找一个专业的人工翻译。以下是我的翻译结果：

关于类型兼容性的一些注释

TypeScript的类型兼容性是基于结构子类型的。结构类型是一种根据类型的成员来判断类型之间的关系的方式。这与名义类型相反。考虑以下代码：

在名义类型的语言中，比如C#或Java，这段代码会报错，因为Dog类没有显式地声明自己是实现了Pet接口的。

TypeScript的结构类型系统是根据JavaScript代码的典型写法设计的。因为JavaScript广泛地使用匿名对象，比如函数表达式和对象字面量，所以用一个结构类型系统来表示JavaScript库中的类型关系比用一个名义类型系统更自然。

TypeScript的类型系统允许一些在编译时无法确定安全性的操作。当一个类型系统具有这种属性时，它被称为不是“完备”的。TypeScript允许不完备的行为的地方是经过仔细考虑的，在本文档中，我们会解释这些地方以及它们背后的动机。

TypeScript的结构类型系统的基本规则是，如果y拥有x的所有成员，那么x就是兼容的。例如，考虑以下涉及一个名为Pet的接口的代码，它有一个name属性：

要检查dog是否可以赋值给pet，编译器会检查pet的每个属性是否在dog中有一个兼容的属性。注意，参数的名称不被考虑，只有它们的类型。在这种情况下，dog必须有一个叫做name的字符串类型的成员。它有，所以赋值是允许的。

在检查函数调用参数的兼容性时，也使用相同的规则：

注意，dog有一个额外的owner属性，但这并不会造成错误。只有目标类型（在这种情况下是Pet）的成员被考虑在内。这个比较过程是递归的，会探索每个成员和子成员的类型。

但是，要注意，对象字面量只能指定已知的属性。例如，因为我们已经明确地指定了dog是Pet类型的，所以下面的代码是无效的：

当比较两个函数的兼容性时，参数列表是最重要的。x的每个参数必须有一个在y中有一个兼容类型的对应参数。注意，参数的名称不被考虑，只有它们的类型。在这种情况下，x的每个参数都有一个在y中有一个兼容类型的对应参数，所以赋值是允许的。

第二个赋值是一个错误，因为y有一个必需的第二个参数，而x没有，所以赋值是不允许的。

你可能会想知道为什么我们允许“丢弃”参数，就像在y = x的例子中。允许这种赋值的原因是，忽略额外的函数参数在JavaScript中是很常见的。例如，Array#forEach提供了三个参数给回调函数：数组元素，它的索引，和包含它的数组。1然而，提供一个只使用第一个参数的回调函数是很有用的：

现在让我们看看返回类型是如何被处理的，使用两个函数，它们只有返回类型不同：

类型系统强制源函数的返回类型必须是目标类型的返回类型的子类型。

在比较函数参数的类型时，赋值成功的条件是，源参数可以赋值给目标参数，或者反过来。这是不完备的，因为一个调用者可能会给一个需要更专门类型的函数传递一个更一般类型的参数，但是在实践中，这种错误很少发生，而且允许这种情况可以支持许多常见的JavaScript模式。一个简短的例子：

// 仍然不允许（明显的错误）。对完全不兼容的类型进行了类型安全的检查

你可以通过编译器标志strictFunctionTypes来让TypeScript在这种情况下报错。

在比较函数的兼容性时，可选参数和必需参数是可以互换的。源类型的额外可选参数不是错误，目标类型没有对应参数的可选参数也不是错误。

当一个函数有一个剩余参数时，它被当作是一个无限的可选参数序列。

这从类型系统的角度来看是不完备的，但是从运行时的角度来看，可选参数的概念通常不是很严格的，因为在那个位置传递undefined对于大多数函数来说是等价的。

一个动机的例子是一个常见的模式，一个函数接受一个回调，并用一些可预测的（对程序员来说）但未知的（对类型系统来说）数量的参数来调用它：

/* … 用’args’调用回调 … */

当一个函数有重载时，目标类型的每个重载必须有一个在源类型中有一个兼容的签名。这确保了源函数可以在所有与目标函数相同的情况下被调用。

枚举类型与数字类型是兼容的，数字类型与枚举类型是兼容的。不同枚举类型的枚举值被认为是不兼容的。例如，

类的工作方式类似于对象字面量类型和接口，有一个例外：它们有一个静态部分和一个实例部分。当比较两个类类型的对象时，只有实例的成员被比较。静态成员和构造函数不影响兼容性。

类中的私有和受保护的成员会影响它们的兼容性。当一个类的实例被检查兼容性时，如果目标类型包含一个私有成员，那么源类型必须包含一个来自同一个类的私有成员。同样，对于一个有受保护成员的实例，也是如此。这允许一个类与它的超类是赋值兼容的，但不与来自不同继承层次的类是兼容的，即使它们有相同的形状。

因为TypeScript是一个结构类型系统，类型参数只有在作为成员的类型的一部分被消费时才影响结果类型。2例如，

在上面的例子中，x和y是兼容的，因为它们的结构没有以区分的方式使用类型参数。通过给Empty<T>添加一个成员来改变这个例子，可以看到这一点：

这样，一个指定了类型参数的泛型类型就像一个非泛型类型一样。

对于没有指定类型参数的泛型类型，通过用any替换所有未指定的类型参数来检查兼容性。然后，像在非泛型的情况下一样，检查结果类型的兼容性。

// …

// …

到目前为止，我们使用了“兼容”，这不是一个在语言规范中定义的术语。在TypeScript中，有两种兼容性：子类型和赋值。它们之间的区别只是赋值